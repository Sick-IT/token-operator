# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
# INFO:
# while this template supports GitLab "merge-commit", you need to adjust the merge-commit template in your repo
# so that it puts the commit message in the first line, to be parsable as conventional commit.
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        {% if commit.merge_commit and commit.remote.pr_title -%}
        - {{ commit.remote.pr_title | split(pat="\n") | first | upper_first | trim }} \
            ([{{ commit.remote.pr_number }}]({{ get_env(name="CI_PROJECT_URL") }}/-/merge_requests/{{ commit.remote.pr_number }}) \
            @{{ commit.author.name }})
        {% else -%}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }} \
            ([{{ commit.id | truncate(length=7, end="") }}]({{ get_env(name="CI_PROJECT_URL") }}/-/commit/{{ commit.id }}) \
            @{{ commit.author.name }})
        {% endif -%}
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ get_env(name="CI_PROJECT_URL") }}\
                /-/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: {{ get_env(name="CI_PROJECT_URL") }}\
            /-/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n

(This file is automatically generated, editing it is useless)
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
]

[git]
# parse the commits based on https://www.conventionalcommits.org
# this removes the tag/scope 'feat(scope)!:' from the commit message and categorizes accordingly
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^Merge branch 'renovate/", skip = true }, # we skip "renovate/*" merge-commits
  { message = "^Merge branch", group = "<!-- 0 -->🚀 Merge requests" },
  { message = "^Release v", skip = true }, # we skip "Release v..." commits by default, because we have merge-commits
  { message = "^feat", group = "<!-- 1 -->🚀 Features" },
  { message = "^fix", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "^refactor", group = "<!-- 3 -->🚜 Refactor" },
  { message = "^doc", group = "<!-- 4 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 5 -->⚡ Performance" },
  { message = "^style", group = "<!-- 6 -->🎨 Styling" },
  { message = "^test", group = "<!-- 7 -->🧪 Testing" },
  { message = "^chore", group = "<!-- 8 -->⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 9 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 10 -->◀️ Revert" },
  { message = ".*", group = "<!-- 11 -->💼 Other" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"

[bump]
features_always_bump_minor = true
breaking_always_bump_major = true
initial_tag = "v0.0.1"

[remote.gitlab]
owner = "sickit"
repo = "token-operator"
api_url = "https://gitlab.com/api/v4"
